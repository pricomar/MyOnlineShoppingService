<?xml version="1.0" encoding="UTF-8"?>
<con:testCase xmlns:con="http://eviware.com/soapui/config" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" id="dbd2232a-d547-4c82-90d6-dcb941c5b047" keepSession="false" name="DataSource Scripts" searchProperties="true" timeout="0">
  <con:settings id="afdac997-db8a-4055-9990-0bead61bef9f">
    <con:setting id="34f625d5-86db-4865-b44f-e6ca79598e0dfileName">DataSource-Scripts</con:setting>
    <con:setting id="dbd2232a-d547-4c82-90d6-dcb941c5b047fileName">DataSource-Scripts</con:setting>
  </con:settings>
  <con:testStep id="400949e6-8640-4c88-a256-e3d301925468" name="Read CSV" type="datasource">
    <con:settings/>
    <con:config xsi:type="con:DataSourceStep">
      <con:dataSource type="Groovy">
        <con:configuration>
          <script>// Preconditions: properties "name" and "serial" exist
log.info("Reading csv ... ")

// Get current row (iteration of n asked to load)
def row = testRunner.testCase.testSteps["Read CSV"].currentRow;
log.info("row: ${row}")

// CSV path
def fileName = "C:/Curso/workspace/ready-api/data_source/books/books.csv";
log.info("fileName: ${fileName}")

def file = new File(fileName)

/* RAW */
/*def csvRows = file.readLines().tail()*.split(',')

log.info("csvRows: ${csvRows.size}")

if (row &lt; csvRows.size) {    
	result['name'] = csvRows[row][0]
	result['serial'] = csvRows[row][1]
}*/

/* EFFICIENT */

String readFileLineByLine(String filePath, lineNumber) {
    File file = new File(filePath)
    def line, noOfLines = 0;
    file.withReader { reader ->
        while ((line = reader.readLine()) != null &amp;&amp; noOfLines &lt;= lineNumber) {
            //log.info("readFileLineByLine.line: ${noOfLines} -  ${line}")
            if(noOfLines==lineNumber) break;
            else noOfLines++
        }
    }
    return line
}

def aLine = readFileLineByLine(fileName, row+1)
log.info("aLine: ${aLine}")

if (aLine != null) {
	def aLineArr = aLine.split(',')
	result['name'] = aLineArr[0]
	result['serial'] = aLineArr[1]
}</script>
        </con:configuration>
      </con:dataSource>
      <con:shared>true</con:shared>
      <con:restartShared>true</con:restartShared>
      <con:property>name</con:property>
      <con:property>serial</con:property>
      <con:restartOnRun>true</con:restartOnRun>
      <con:stopDatasourceExhausted>false</con:stopDatasourceExhausted>
    </con:config>
  </con:testStep>
  <con:testStep id="bd426618-26f0-432b-aff6-74dd081b745d" name="Read DB" type="datasource">
    <con:settings/>
    <con:config xsi:type="con:DataSourceStep">
      <con:dataSource type="Groovy">
        <con:configuration>
          <script>import groovy.sql.Sql

// Preconditions: properties "name" and "serial" exist
log.info("Reading from db ... ")

// Get current row (iteration of n asked to load)
def it = testRunner.testCase.testSteps["Read DB"].currentRow;
log.info("iter: ${it}")

// DB params
def sql = Sql.newInstance('jdbc:mysql://localhost:3306/productsdb', 'products_user', 'rapi123', 'com.mysql.jdbc.Driver')

sql.eachRow("SELECT * FROM products Limit 1 OFFSET ${it} "){ row ->
	log.info("row: ${row.name} ${row.serial}")
	result['name'] = row.name
	result['serial'] = row.serial
}

sql.close()</script>
        </con:configuration>
      </con:dataSource>
      <con:shared>true</con:shared>
      <con:restartShared>true</con:restartShared>
      <con:property>name</con:property>
      <con:property>serial</con:property>
      <con:restartOnRun>true</con:restartOnRun>
      <con:stopDatasourceExhausted>false</con:stopDatasourceExhausted>
    </con:config>
  </con:testStep>
  <con:properties/>
  <con:reportParameters/>
</con:testCase>
